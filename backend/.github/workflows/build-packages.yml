name: Build Platform Packages

on:
  workflow_run:
    workflows: ["Create Release"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run && format('release/v{0}', github.event.workflow_run.head_branch) || format('release/v{0}', github.event.inputs.version) }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.lock
          pip install pyinstaller
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.workflow_dispatch.inputs.version }}" != "" ]; then
            echo "VERSION=${{ github.event.workflow_dispatch.inputs.version }}" >> $GITHUB_ENV
          else
            # Extract version from branch name (release/vX.Y.Z)
            BRANCH=${{ github.event.workflow_run.head_branch }}
            VERSION=${BRANCH#release/v}
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          fi
      
      - name: Build macOS application
        run: |
          # Create pyinstaller spec
          cat > SecureVideoSummarizer.spec << EOF
          # -*- mode: python ; coding: utf-8 -*-
          
          block_cipher = None
          
          a = Analysis(
              ['app/main.py'],
              pathex=['.'],
              binaries=[],
              datas=[
                ('docs', 'docs'),
                ('app/templates', 'app/templates'),
                ('app/static', 'app/static'),
              ],
              hiddenimports=[
                'flask', 
                'flask_session', 
                'flask_limiter', 
                'google_auth_oauthlib',
                'app.config',
                'app.summarizer.processor',
                'app.summarizer.ollama_client'
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )
          
          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
          
          exe = EXE(
              pyz,
              a.scripts,
              [],
              exclude_binaries=True,
              name='SecureVideoSummarizer',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              console=False,
              disable_windowed_traceback=False,
              argv_emulation=True,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          
          coll = COLLECT(
              exe,
              a.binaries,
              a.zipfiles,
              a.datas,
              strip=False,
              upx=True,
              upx_exclude=[],
              name='SecureVideoSummarizer',
          )
          
          app = BUNDLE(
              coll,
              name='SecureVideoSummarizer.app',
              icon=None,
              bundle_identifier='com.securevideosummarizer.app',
              info_plist={
                  'CFBundleShortVersionString': '${{ env.VERSION }}',
                  'NSHighResolutionCapable': 'True',
              },
          )
          EOF
          
          # Build the app
          pyinstaller --clean SecureVideoSummarizer.spec
          
          # Create launcher script
          cat > dist/SecureVideoSummarizer.app/Contents/MacOS/launcher.sh << EOF
          #!/bin/bash
          cd "\$(dirname "\$0")"
          ./SecureVideoSummarizer
          EOF
          
          chmod +x dist/SecureVideoSummarizer.app/Contents/MacOS/launcher.sh
          
          # Package into a DMG (optional)
          hdiutil create -volname "SecureVideoSummarizer-${{ env.VERSION }}" -srcfolder dist/SecureVideoSummarizer.app -ov -format UDZO SecureVideoSummarizer-macOS-${{ env.VERSION }}.dmg
          
          # Also create a ZIP file
          cd dist
          zip -r -9 ../SecureVideoSummarizer-macOS-${{ env.VERSION }}.zip SecureVideoSummarizer.app
          cd ..
      
      - name: Upload macOS Package
        uses: actions/upload-artifact@v3
        with:
          name: SecureVideoSummarizer-macOS
          path: |
            SecureVideoSummarizer-macOS-${{ env.VERSION }}.zip
            SecureVideoSummarizer-macOS-${{ env.VERSION }}.dmg
  
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run && format('release/v{0}', github.event.workflow_run.head_branch) || format('release/v{0}', github.event.inputs.version) }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.lock
          pip install pyinstaller
      
      - name: Determine version
        id: version
        run: |
          if ("${{ github.event.workflow_dispatch.inputs.version }}" -ne "") {
            echo "VERSION=${{ github.event.workflow_dispatch.inputs.version }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            # Extract version from branch name (release/vX.Y.Z)
            $BRANCH="${{ github.event.workflow_run.head_branch }}"
            $VERSION=$BRANCH.Replace("release/v", "")
            echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
      
      - name: Build Windows application
        run: |
          # Create PyInstaller spec file
          @"
          # -*- mode: python ; coding: utf-8 -*-
          
          block_cipher = None
          
          a = Analysis(
              ['app\\main.py'],
              pathex=['.'],
              binaries=[],
              datas=[
                ('docs', 'docs'),
                ('app\\templates', 'app\\templates'),
                ('app\\static', 'app\\static'),
              ],
              hiddenimports=[
                'flask', 
                'flask_session', 
                'flask_limiter', 
                'google_auth_oauthlib',
                'app.config',
                'app.summarizer.processor',
                'app.summarizer.ollama_client'
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )
          
          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
          
          exe = EXE(
              pyz,
              a.scripts,
              [],
              exclude_binaries=True,
              name='SecureVideoSummarizer',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              console=False,
              disable_windowed_traceback=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
              icon=None,
              version='file_version_info.txt',
          )
          
          coll = COLLECT(
              exe,
              a.binaries,
              a.zipfiles,
              a.datas,
              strip=False,
              upx=True,
              upx_exclude=[],
              name='SecureVideoSummarizer',
          )
          "@ | Out-File -FilePath SecureVideoSummarizer.spec -Encoding utf8
          
          # Create version info file
          $version = "${{ env.VERSION }}"
          $versionParts = $version.Split('.')
          if ($versionParts.Count -lt 3) {
              $version = "$version.0"
          }
          
          @"
          VSVersionInfo(
            ffi=FixedFileInfo(
              filevers=($($versionParts[0]), $($versionParts[1]), $($versionParts[2]), 0),
              prodvers=($($versionParts[0]), $($versionParts[1]), $($versionParts[2]), 0),
              mask=0x3f,
              flags=0x0,
              OS=0x40004,
              fileType=0x1,
              subtype=0x0,
              date=(0, 0)
            ),
            kids=[
              StringFileInfo(
                [
                  StringTable(
                    u'040904B0',
                    [StringStruct(u'CompanyName', u'Secure Video Summarizer'),
                    StringStruct(u'FileDescription', u'Secure Video Summarizer'),
                    StringStruct(u'FileVersion', u'$version'),
                    StringStruct(u'InternalName', u'SecureVideoSummarizer'),
                    StringStruct(u'LegalCopyright', u'Copyright (c) 2024'),
                    StringStruct(u'OriginalFilename', u'SecureVideoSummarizer.exe'),
                    StringStruct(u'ProductName', u'Secure Video Summarizer'),
                    StringStruct(u'ProductVersion', u'$version')])
                ]),
              VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
            ]
          )
          "@ | Out-File -FilePath file_version_info.txt -Encoding utf8
          
          # Build the application
          pyinstaller --clean SecureVideoSummarizer.spec
          
          # Create launcher batch file
          @"
          @echo off
          cd /d "%~dp0"
          start /b SecureVideoSummarizer.exe
          "@ | Out-File -FilePath dist\SecureVideoSummarizer\launcher.bat -Encoding ascii
          
          # Create the installer (optional, requires NSIS)
          # ... (NSIS code here if needed) ...
          
          # Create zip package
          Compress-Archive -Path dist\SecureVideoSummarizer\* -DestinationPath SecureVideoSummarizer-Windows-${{ env.VERSION }}.zip -Force
      
      - name: Upload Windows Package
        uses: actions/upload-artifact@v3
        with:
          name: SecureVideoSummarizer-Windows
          path: SecureVideoSummarizer-Windows-${{ env.VERSION }}.zip 