name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
      release_notes:
        description: 'Release notes'
        required: true

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.lock
          pip install pyinstaller pytest pytest-cov
      
      - name: Run optimizations and tests
        run: |
          # Run tests to ensure everything is working
          python -m pytest tests/ -v
          
          # Remove test artifacts and temporary files
          rm -rf tests/
          rm -rf __pycache__/
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -delete
          rm -rf .pytest_cache/
          
          # Remove development-only files
          rm -f test_*.py
          rm -f run_test*.py
          rm -f run_audio_tests.py
          rm -f manual_*.py
          rm -f setup_test_env.sh
          
      - name: Optimize Python code
        run: |
          # Install optimization tools
          pip install python-minifier pybench
          
          # Create optimized versions of key modules (example for a few files)
          mkdir -p optimized
          python -m python_minifier app/summarizer/processor.py > optimized/processor.py
          python -m python_minifier app/api/routes.py > optimized/routes.py
          
          # Run benchmarks to verify optimizations
          echo "Running benchmarks to verify optimizations"
          # Add custom benchmark code if needed
      
      - name: Create Release Branch
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git checkout -b release/v${{ github.event.inputs.version }}
          
          # Create optimized package without test files
          mkdir -p release/SecureVideoSummarizer
          cp -r app release/SecureVideoSummarizer/
          cp -r docs release/SecureVideoSummarizer/
          cp requirements.txt release/SecureVideoSummarizer/
          cp README.md release/SecureVideoSummarizer/
          cp setup_dev_env.* release/SecureVideoSummarizer/
          
          # Create distribution packages
          cd release
          zip -r SecureVideoSummarizer-v${{ github.event.inputs.version }}.zip SecureVideoSummarizer/
          
          # Move back and commit changes
          cd ..
          git add release/
          git commit -m "Release v${{ github.event.inputs.version }}"
          git push --set-upstream origin release/v${{ github.event.inputs.version }}
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset (Zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/SecureVideoSummarizer-v${{ github.event.inputs.version }}.zip
          asset_name: SecureVideoSummarizer-v${{ github.event.inputs.version }}.zip
          asset_content_type: application/zip 